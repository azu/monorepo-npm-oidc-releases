# This workflow runs when a Release PR is merged to publish packages
#
# OIDC Configuration:
# This workflow uses OpenID Connect (OIDC) for npm authentication
# instead of long-lived npm tokens. Provenance is automatically
# generated for published packages.
name: Release

on:
  pull_request:
    branches:
      - master
      - main
    types:
      - closed

jobs:
  release:
    if: |
      github.event.pull_request.merged == true &&
      contains(github.event.pull_request.labels.*.name, 'Type: Release')
    runs-on: ubuntu-latest
    environment: npm
    permissions:
      contents: write
      id-token: write  # Required for OIDC npm authentication
      pull-requests: write
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          persist-credentials: false
      
      - name: Get package info
        id: package
        run: |
          VERSION=$(jq -r '.version' package.json)
          echo "version=$VERSION" >> $GITHUB_OUTPUT
      
      - name: Check if tag exists
        id: tag-check
        run: |
          if git rev-parse "v$VERSION" >/dev/null 2>&1; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi
        env:
          VERSION: ${{ steps.package.outputs.version }}
      
      - name: Setup pnpm
        if: steps.tag-check.outputs.exists == 'false'
        uses: pnpm/action-setup@a7487c7e89a18df4991f7f222e4898a00d66ddda # v4.1.0
      
      - name: Setup Node.js
        if: steps.tag-check.outputs.exists == 'false'
        uses: actions/setup-node@1d0ff469b7ec7b3cb9d8673fde0c81c44821de2a # v4.2.0
        with:
          node-version: 'lts/*'
          registry-url: 'https://registry.npmjs.org'
      
      - name: Install latest npm
        if: steps.tag-check.outputs.exists == 'false'
        run: |
          echo "Current npm version: $(npm -v)"
          npm install -g npm@latest
          echo "Updated npm version: $(npm -v)"
      
      - name: Install dependencies
        if: steps.tag-check.outputs.exists == 'false'
        run: pnpm install --frozen-lockfile
      
      - name: Build packages
        if: steps.tag-check.outputs.exists == 'false'
        run: npm run build
      
      - name: Publish to npm with provenance
        if: steps.tag-check.outputs.exists == 'false'
        run: pnpm -r publish --access public --no-git-checks
        env:
          NPM_CONFIG_PROVENANCE: true
      
      - name: Create GitHub Release with tag
        id: create-release
        if: steps.tag-check.outputs.exists == 'false'
        run: |
          RELEASE_URL=$(gh release create "v$VERSION" \
            --title "v$VERSION" \
            --target "$SHA" \
            --notes "$PR_BODY")
          echo "url=$RELEASE_URL" >> $GITHUB_OUTPUT
        env:
          GH_TOKEN: ${{ github.token }}
          VERSION: ${{ steps.package.outputs.version }}
          SHA: ${{ github.sha }}
          PR_BODY: ${{ github.event.pull_request.body }}

      - name: Comment on PR - Success
        if: |
          always() && 
          github.event_name == 'pull_request' && 
          steps.tag-check.outputs.exists == 'false' &&
          success()
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        env:
          PACKAGE_VERSION: ${{ steps.package.outputs.version }}
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const packageVersion = process.env.PACKAGE_VERSION;
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `ðŸŽ‰ Release https://github.com/${context.repo.owner}/${context.repo.repo}/releases/tag/v${packageVersion}`
            })